#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class CrawlUri(object):
  """
  The main strcut for CrawlUris.

  This contains some metadata and if possible the saved web page.

  Attributes:
   - url
   - host_identifier
   - begin_processing
   - end_processing
   - req_header
   - rep_header
   - content_body
   - optional_vars
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'url', None, None, ), # 1
    (2, TType.STRING, 'host_identifier', None, None, ), # 2
    (3, TType.I64, 'begin_processing', None, None, ), # 3
    (4, TType.I64, 'end_processing', None, None, ), # 4
    (5, TType.MAP, 'req_header', (TType.STRING,None,TType.STRING,None), None, ), # 5
    (6, TType.MAP, 'rep_header', (TType.STRING,None,TType.STRING,None), None, ), # 6
    (7, TType.STRING, 'content_body', None, None, ), # 7
    (8, TType.MAP, 'optional_vars', (TType.STRING,None,TType.STRING,None), None, ), # 8
  )

  def __init__(self, url=None, host_identifier=None, begin_processing=None, end_processing=None, req_header=None, rep_header=None, content_body=None, optional_vars=None,):
    self.url = url
    self.host_identifier = host_identifier
    self.begin_processing = begin_processing
    self.end_processing = end_processing
    self.req_header = req_header
    self.rep_header = rep_header
    self.content_body = content_body
    self.optional_vars = optional_vars

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.host_identifier = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.begin_processing = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.end_processing = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.req_header = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin() 
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.req_header[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.rep_header = {}
          (_ktype8, _vtype9, _size7 ) = iprot.readMapBegin() 
          for _i11 in xrange(_size7):
            _key12 = iprot.readString();
            _val13 = iprot.readString();
            self.rep_header[_key12] = _val13
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.content_body = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.MAP:
          self.optional_vars = {}
          (_ktype15, _vtype16, _size14 ) = iprot.readMapBegin() 
          for _i18 in xrange(_size14):
            _key19 = iprot.readString();
            _val20 = iprot.readString();
            self.optional_vars[_key19] = _val20
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CrawlUri')
    if self.url != None:
      oprot.writeFieldBegin('url', TType.STRING, 1)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.host_identifier != None:
      oprot.writeFieldBegin('host_identifier', TType.STRING, 2)
      oprot.writeString(self.host_identifier)
      oprot.writeFieldEnd()
    if self.begin_processing != None:
      oprot.writeFieldBegin('begin_processing', TType.I64, 3)
      oprot.writeI64(self.begin_processing)
      oprot.writeFieldEnd()
    if self.end_processing != None:
      oprot.writeFieldBegin('end_processing', TType.I64, 4)
      oprot.writeI64(self.end_processing)
      oprot.writeFieldEnd()
    if self.req_header != None:
      oprot.writeFieldBegin('req_header', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.req_header))
      for kiter21,viter22 in self.req_header.items():
        oprot.writeString(kiter21)
        oprot.writeString(viter22)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.rep_header != None:
      oprot.writeFieldBegin('rep_header', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.rep_header))
      for kiter23,viter24 in self.rep_header.items():
        oprot.writeString(kiter23)
        oprot.writeString(viter24)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.content_body != None:
      oprot.writeFieldBegin('content_body', TType.STRING, 7)
      oprot.writeString(self.content_body)
      oprot.writeFieldEnd()
    if self.optional_vars != None:
      oprot.writeFieldBegin('optional_vars', TType.MAP, 8)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.optional_vars))
      for kiter25,viter26 in self.optional_vars.items():
        oprot.writeString(kiter25)
        oprot.writeString(viter26)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
